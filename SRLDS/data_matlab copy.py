import numpy as np
from filtering import *
from smoother import *

S = 2
T=10
V= np.array([[-31.69494190698104, 56.18889035697558, -26.763046060988696, 59.461429374508946, 75.82971850336382, 41.29065517560581, -145.17261770677376, -289.4191326165435, -247.12063460747814, -206.56304247819907, -448.1418214586224, -424.0234938429877, -290.2835625001749, -556.2833138644177, -469.91220718441326, -504.27886482831826, -591.5270962914045, -626.1940439992437, -657.0202174423255, -538.3716791570587, -514.9795461135349, -548.6255176972744, -380.9987643352469, -298.05626786026966, -399.166417722306, -333.55202697876547, -197.82889167351632, -32.33628283886344, 34.23273962131784, 22.364862534957986, 134.26203467807053, -10.262043576162947, -113.0677905161079, -52.6442773273328, -130.51557969090527, -237.6153938498625, -106.30059421232123, -14.641458414976034, -171.18684931256996, -414.4107556517643, -86.3671792866318, 179.09909169385114, 348.9638948646207, 673.1203965159123, 626.122954225436, 763.6022733083247, 680.7566481477226, 801.3557488746553, 627.9021791200054, 485.9728046216701, 324.94436476010975, 343.1218879572996, 119.49145643450088, -56.556102191424465, -127.79083937146008, -297.928867586267, -208.29410033879753, -409.63439518268365, -384.9721931360029, -262.99033967039065, -158.07615930769217, -31.676342779554158, 263.5130259189697, 448.77927555935116, 436.0238374355293, 763.1355674219079, 1691.0401763140933, 1351.00071404, 1440.2110473819405, 1345.7415412041198, 1452.8820236572608, 1052.2522668063798, 1314.8962196770017, 1481.8986169417724, 1506.0107683131166, 1145.9907642448654, 794.6007113155931, 599.0099804746695, -215.1468578596749, -17.960939007888612, 169.92033571596713, 465.3593707320687, 96.06321333252181, 520.4963199278362, 420.59618675968966, 245.30562664226463, 94.30408582670981, 178.13645975552132, 399.82815848232724, 284.1431282633724, 119.72452820617632, 134.77103502999648, -558.2897283013394, -695.0291019250542, -548.6217146361024, -704.5705677963473, -912.4390118207237, -545.0356981649386, -727.9737387001059, -670.9806278443896, -712.0361155968428, -842.8260746092432, -486.99546564775227, -470.38690703422634, -50.35297312288705, -112.87642234822549, 330.37332750592685, 732.9022641130628, 1005.671469618466, 597.2125889615045, 664.6983894414958, 797.7184980975107, 978.9087152559727, 1240.5668937271591, 835.4370763628293, 753.264395308705, 884.8723274260637, 860.2696603182726, 339.8076413833665, -279.45311771389237, -320.58550247782347, -139.74930615677098, -57.444772717392624, 7.903005929925085, -221.99206182409625, -361.5154646578583, -304.10035853070434, -25.380429831407696, -304.0939001841485, -591.7245570038409, -123.3435349642758, 57.64550285964265, -115.151580889016, -156.407619120228, 162.73648381731527, 96.6526485086074, 358.3368342430108, 325.50581507185126, 455.5938738953405, 218.19980890081766, 658.2675824055781, 1059.6491440270204, 1015.562381932326, 1248.8610170624806, 675.2372261880845, 981.6149537645274, 500.8154493414349, 411.0209883177592, 118.61374276326447, -1518.63603921978, -703.4433635557639, -736.3147079546135, -906.2457577399044, -791.4154989817343, -822.8183329390229, -804.8412322708242, -230.9180636628561, -538.3926508390255, -311.9683092750902, -295.78393685416967, 76.29697247939009, 1632.79739413899, 476.9876934617629, 485.68893843084726, 168.5274562139424, -189.9603143950601, -206.3921097369827, -401.2481995065232, -263.37267998176486, -596.0347285611308, -1125.466158924053, -1076.2782327712266, -1270.0544764880278, -1213.8089144298424, -1256.9328703671797, -1586.1659634471007, -2576.6507149534123, -1575.5115928259845, -866.6537849636164, -531.5479607932319, -1356.345101925815, -1022.5595373203984, -369.48048442244306, -639.6735451376478, -418.4631927232749, -410.32011569115394, 161.67659280646433, 335.4855464545114, 1438.778005893978, 690.2450890079928, -67.05048600244308, -646.6427418069078, 178.97823193668725]])



B0 = np.array([[1], [1]])
mu0v = [0, 0]
sig0v = [1300,1300]


mu0h = np.empty(shape = [2,1],dtype = object)
mu0h[0] = np.array([[0]])
mu0h[1] = np.array([[0]])






sig0h = np.empty(shape = [2,1,1], dtype = object)

sig0h[0] =np.array([[.01]])

sig0h[1] = np.array([[.01]])



A = np.empty(shape = [2,1,1], dtype = object)

A[0] =  np.array([[1]])

A[1] = np.array([[1]])

B1 = np.empty(shape = [2,1],dtype = object)
B1[0] = np.array([[1]])
B1[1] = np.array([[1]])

mu1v = np.array([0,	0])
sig1v = np.array([.01,.01])

mu1h = np.empty(shape = [2,1],dtype = object)
mu1h[0] = np.array([[927]])
mu1h[1] = np.array([[-927]])


sig1h = np.empty(shape = [2,1,1],dtype = object)
sig1h[0] = np.array([[138000]])
sig1h[1] = np.array([[138000]])


pstgstm1ctm1 = np.empty(shape = [2,2,2])
pstgstm1ctm1[:,:,0] = np.array([[0.95,    .05],[0.05,    0.95]])
pstgstm1ctm1[:,:,1] = np.array([[1,    1.0000e-06],[1.0000e-06,    1]])


ps1 = np.array([[.964, .036]])


muh1 = np.empty(shape = [2,1],dtype = object)
muh1[0] = np.array([[.5]])
muh1[1] = np.array([[-.5]])


sigh1 = np.empty(shape = [2,1,1])
sigh1[0] = np.array([[.1]])

sigh1[1] = np.array([[.1]])




class P_testing():
     #p.B1, p.mu1v, p.sig1v, p.mu1h, p.sig1h, p.pstgstm1ctm1, p.ps1, p.muh1, p.sigh1
    def __init__(self, B0, mu0v,sig0v,mu0h,sig0h,A,B1,mu1v,sig1v,mu1h,sig1h,pstgstm1ctm1,ps1,muh1,sigh1):
        self.B0 = B0
        self.mu0v = mu0v
        self.sig0v = sig0v
        self.mu0h = mu0h
        self.sig0h = sig0h
        self.A = A
        self.B1 = B1
        self.mu1v = mu1v
        self.sig1v = sig1v
        self.mu1h = mu1h
        self.sig1h = sig1h
        self.pstgstm1ctm1 = pstgstm1ctm1
        self.ps1 = ps1
        self.muh1 = muh1
        self.sigh1 = sigh1

p = P_testing(B0, mu0v,sig0v,mu0h,sig0h,A,B1,mu1v,sig1v,mu1h,sig1h,pstgstm1ctm1,ps1,muh1,sigh1)

f, F, w, alpha, loglik = filtering(p,V,2)


"""
x,beta = RTSLinearSmoother(p,V,f,F,w,2)
print(x)
mass_aprox = np.zeros(shape = [S,T])
print('-----')
for t in range(T):
    for s in range(S):
        print(sum(sum(x[t][s])))
        #mass_aprox[s, t] =
        #mass_aprox[s,t] = sum(sum(x[t][s])) if sum(sum(x[t][s])) <=1 else 1
        mass_aprox[s, t] = sum(sum(x[t][s]))
print(mass_aprox)
print(np.sum(mass_aprox,axis = 0))





import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import pandas as pd

# Data
r = range(T)
raw_data = {'State 0': mass_aprox[0], 'State 1': mass_aprox[1]}
df = pd.DataFrame(raw_data)

# From raw value to percentage
totals = [i + j for i, j in zip(df['State 0'], df['State 1'])]
greenBars = [i / j * 100 for i, j in zip(df['State 0'], totals)]
orangeBars = [i / j * 100 for i, j in zip(df['State 1'], totals)]


# plot
barWidth = 1
names = ('A', 'B', 'C', 'D', 'E')
# Create green Bars
plt.bar(r, greenBars, color='#b5ffb9', edgecolor='white', width=barWidth)
# Create orange Bars
plt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', edgecolor='white', width=barWidth)
# Create blue Bars


# Custom x axis
plt.xticks(r, names)
plt.xlabel("group")

# Show graphic
plt.show()

"""
